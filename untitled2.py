# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XFHqKemYpxO4nQjDRfbtZFk-s5tgLELF
"""

!pip install streamlit

import streamlit as st
import re
import nltk
from nltk.tokenize import word_tokenize
from nltk.corpus import stopwords, movie_reviews
from nltk.stem import WordNetLemmatizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn.model_selection import train_test_split

# Download required NLTK resources (only once)
nltk.download("punkt")
nltk.download("stopwords")
nltk.download("wordnet")
nltk.download("movie_reviews")
nltk.download('punkt_tab')

# --- Preprocessing ---
def preprocess(text):
    text = text.lower()
    text = re.sub(r'[^a-z\s]', '', text)
    tokens = word_tokenize(text)
    tokens = [t for t in tokens if t not in stopwords.words('english')]
    lemmatizer = WordNetLemmatizer()
    tokens = [lemmatizer.lemmatize(t) for t in tokens]
    return " ".join(tokens)

# --- Load and preprocess dataset ---
def load_data():
    texts, labels = [], []
    for fileid in movie_reviews.fileids():
        texts.append(movie_reviews.raw(fileid))
        labels.append(movie_reviews.categories(fileid)[0])
    label_map = {"pos": 1, "neg": 0}
    labels = [label_map[label] for label in labels]
    texts = [preprocess(text) for text in texts]
    return texts, labels

texts, labels = load_data()
X_train, X_test, y_train, y_test = train_test_split(texts, labels, test_size=0.2, random_state=42)

# --- Train model ---
model = Pipeline([
    ('tfidf', TfidfVectorizer(max_features=5000, ngram_range=(1, 2))),
    ('clf', LogisticRegression(C=1.0, solver='lbfgs', max_iter=1000))
])
model.fit(X_train, y_train)

# --- Streamlit UI ---
st.title("ðŸŽ¯ Sentiment Analysis App")
st.write("Enter a movie review below to predict its sentiment:")

user_input = st.text_area("Review Text")

if st.button("Predict Sentiment"):
    if user_input.strip() == "":
        st.warning("Please enter some text.")
    else:
        processed = preprocess(user_input)
        prediction = model.predict([processed])[0]
        sentiment = "Positive ðŸ˜Š" if prediction == 1 else "Negative ðŸ˜ž"
        st.success(f"Predicted Sentiment: *{sentiment}*")